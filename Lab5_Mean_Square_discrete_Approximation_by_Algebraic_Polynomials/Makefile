# Compiler and flags
CC = gcc
# Flags: -Wall (all warnings), -Wextra (more warnings), -O3 (optimization), -Iinclude (find headers), -g (debugging symbols)
CFLAGS = -Wall -Wextra -O3 -Iinclude -g -Wno-unused-parameter
LDFLAGS = -lm # Link math library

# Directories
SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin
DATA_DIR = data
PLOTS_DIR = plots
SCRIPT_DIR = scripts

# Source and object files
# List all .c files
SOURCES = $(SRC_DIR)/approximation.c \
          $(SRC_DIR)/error.c \
          $(SRC_DIR)/fileio.c \
          $(SRC_DIR)/function.c \
          $(SRC_DIR)/linear_algebra.c \
          $(SRC_DIR)/nodes.c \
          $(SRC_DIR)/main.c # Use the new main.c

OBJECTS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SOURCES))
EXECUTABLE = $(BIN_DIR)/approximation_app # Executable name

# Files generated by main.c
HEATMAP_DATA = $(DATA_DIR)/approximation_heatmap_errors.csv
ORIGINAL_PLOT_DATA = $(DATA_DIR)/original_function_plot.dat
# Data files for individual approximations and sample points are generated inside loops
# Naming conventions: sample_points_n{N}.dat, approximation_degree{M}_points{N}.dat

# Gnuplot scripts generated by main.c
HEATMAP_MAX_ERROR_SCRIPT = $(SCRIPT_DIR)/plot_approx_max_error_heatmap.gp
HEATMAP_MSE_SCRIPT = $(SCRIPT_DIR)/plot_approx_mse_heatmap.gp
INDIVIDUAL_APPROX_SCRIPT = $(SCRIPT_DIR)/plot_all_approximations.gp

# Plot files generated by the scripts
HEATMAP_MAX_ERROR_PLOT = $(PLOTS_DIR)/approximation_max_error_heatmap.png
HEATMAP_MSE_PLOT = $(PLOTS_DIR)/approximation_mse_heatmap.png
# Individual plot files are generated inside a script loop, naming: plots/approximation_m{M}_n{N}.png


# Default rule: build the executable
all: directories $(EXECUTABLE)

# Create necessary directories
directories:
	@mkdir -p $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(PLOTS_DIR) $(SCRIPT_DIR)

# Compile object files
# Generic rule for compiling .c to .o, assumes headers are in include/ and common ones are listed
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(addprefix include/, common.h function.h nodes.h approximation.h error.h fileio.h linear_algebra.h)
	@mkdir -p $(@D) # Ensure object directory exists
	$(CC) $(CFLAGS) -c $< -o $@

# Link the program
$(EXECUTABLE): $(OBJECTS)
	@mkdir -p $(@D) # Ensure bin directory exists
	$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS)

# --- Data Generation and Plotting ---

# Target to run the program and generate data (heatmap data, individual data files) and all plot scripts
# This target depends on the executable and lists the *main output files* that signal success.
run: all $(HEATMAP_DATA) $(HEATMAP_MAX_ERROR_SCRIPT) $(HEATMAP_MSE_SCRIPT) $(INDIVIDUAL_APPROX_SCRIPT) $(ORIGINAL_PLOT_DATA)

# The executable target: Running the executable generates ALL data files and ALL scripts.
# We list the primary generated files as dependencies of this pseudo-target.
# This ensures 'make run' first builds the executable, then runs it once
# to generate all required inputs for the 'plots' target.
$(HEATMAP_DATA) $(HEATMAP_MAX_ERROR_SCRIPT) $(HEATMAP_MSE_SCRIPT) $(INDIVIDUAL_APPROX_SCRIPT) $(ORIGINAL_PLOT_DATA): $(EXECUTABLE)
	@echo "Running program $(EXECUTABLE) to generate data files and plot scripts..."
	@./$(EXECUTABLE)


# Target to generate plots using the generated Gnuplot scripts
# Depends on 'run' ensuring all data and scripts are generated.
plots: run $(HEATMAP_MAX_ERROR_PLOT) $(HEATMAP_MSE_PLOT) # Individual plots are handled by the script loop

# Rules to generate heatmap plots from the heatmap script and data
$(HEATMAP_MAX_ERROR_PLOT): $(HEATMAP_MAX_ERROR_SCRIPT) $(HEATMAP_DATA)
	@echo "Generating Max Error heatmap plot..."
	@gnuplot $<

$(HEATMAP_MSE_PLOT): $(HEATMAP_MSE_SCRIPT) $(HEATMAP_DATA)
	@echo "Generating MSE heatmap plot..."
	@gnuplot $<

# Rule to generate ALL individual approximation plots
# This depends on the script that generates them, and *conceptually* on the data files,
# but Gnuplot finds the data files based on filenames constructed within the script.
# We list the script as the dependency and trigger its execution.
# Note: This rule does NOT list specific output PNGs as the script generates many.
generate_individual_plots: $(INDIVIDUAL_APPROX_SCRIPT)
	@echo "Generating all individual approximation plots (this may take a while)..."
	@gnuplot $<


# The main 'plots' target depends on generating the heatmaps AND the individual plots
plots: generate_individual_plots

# Print information about generated files after plotting
plots:
	@echo "Generated CSV files in directory $(DATA_DIR):"
	@ls -l $(DATA_DIR)/*.csv 2>/dev/null || echo "No CSV files found."
	@echo "Generated PNG files in directory $(PLOTS_DIR):"
	@ls -l $(PLOTS_DIR)/*.png 2>/dev/null || echo "No PNG files found."
	@echo "Plots generated."


# --- Cleaning ---

# Clean temporary files
clean:
	@echo "Cleaning temporary files..."
	rm -f $(OBJ_DIR)/*.o
	rm -f $(EXECUTABLE)
	# Remove generated data files (CSV, original function, sample points, approximation points)
	rm -f $(DATA_DIR)/*.csv $(DATA_DIR)/*.dat

	# Remove generated plot files (heatmaps, individual plots)
	rm -f $(PLOTS_DIR)/*.png

	# Remove generated gnuplot scripts
	rm -f $(SCRIPT_DIR)/*.gp
	@echo "Cleaning finished."

# Deep clean (remove generated directories too)
distclean: clean
	@echo "Removing all generated directories..."
	rm -rf $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(PLOTS_DIR) $(SCRIPT_DIR)
	@echo "Deep cleaning finished."

# --- Help ---

# Help message
help:
	@echo "Available commands:"
	@echo "  make all       - Compiles the approximation program (default)"
	@echo "  make run       - Compiles the program and runs it to generate all data files and scripts"
	@echo "  make plots     - Runs the program (if necessary) and generates all heatmap and individual plots from the data/scripts"
	@echo "  make clean     - Removes object files, executable, generated data, plots, and scripts"
	@echo "  make distclean - Performs 'clean' and removes generated directories"
	@echo "  make help      - Displays this help message"

# Declare phony targets - targets that are not actual files
.PHONY: all directories run plots generate_individual_plots clean distclean help