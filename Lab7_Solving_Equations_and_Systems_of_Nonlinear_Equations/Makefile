# Compiler and flags
CC = gcc
CFLAGS = -Wall -Wextra -O2 -Iinclude -g # Optimization L2, include path, debug info
LDFLAGS = -lm # Link math library
PYTHON = python3 # Define Python interpreter

# Directories
SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin
DATA_DIR = data
PLOTS_DIR = plots
SCRIPT_DIR = scripts
TABLE_DIR = tables

# Source and object files for root finding
SOURCES = $(SRC_DIR)/root_finding.c \
          $(SRC_DIR)/fileio.c \
          $(SRC_DIR)/function.c \
          $(SRC_DIR)/main.c
OBJECTS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SOURCES))

# Executable name
EXECUTABLE = $(BIN_DIR)/root_finder_app

# --- Generated Files ---
# Data generated by C program
RESULTS_CSV = $(DATA_DIR)/root_finding_results.csv
FUNCTION_DATA = $(DATA_DIR)/function_data.dat # Data for plotting f(x)

# Script generated by C program (for function plot)
FUNCTION_PLOT_SCRIPT = $(SCRIPT_DIR)/plot_function.gp
# Iteration plot scripts (placeholders) are no longer generated by C code.

# Python script for table generation and heatmap plotting
PYTHON_PLOT_SCRIPT = $(SRC_DIR)/plot_results.py

# Plot files generated by Python script (uses OUTPUT_FORMAT variable)
OUTPUT_FORMAT = png # Change to png or pdf if desired (match Python script's setting)

PY_ITER_HEATMAPS = $(PLOTS_DIR)/heatmap_iter_newton.$(OUTPUT_FORMAT) \
                   $(PLOTS_DIR)/heatmap_iter_secant_a.$(OUTPUT_FORMAT) \
                   $(PLOTS_DIR)/heatmap_iter_secant_b.$(OUTPUT_FORMAT)
PY_ERROR_HEATMAPS = $(PLOTS_DIR)/heatmap_error_newton.$(OUTPUT_FORMAT) \
                    $(PLOTS_DIR)/heatmap_error_secant_a.$(OUTPUT_FORMAT) \
                    $(PLOTS_DIR)/heatmap_error_secant_b.$(OUTPUT_FORMAT)
# Define primary targets for Python plots rule
PY_PLOTS = $(PY_ITER_HEATMAPS) $(PY_ERROR_HEATMAPS)

# Gnuplot output file
GNUPLOT_FUNC_PLOT = $(PLOTS_DIR)/function_plot.png

# Default rule: build the executable
all: directories $(EXECUTABLE)

# Create necessary directories
directories:
	@mkdir -p $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(PLOTS_DIR) $(SCRIPT_DIR) $(TABLE_DIR)

# Compile object files (Dependency list uses wildcard for headers)
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(wildcard include/*.h)
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $< -o $@

# Link the program
$(EXECUTABLE): $(OBJECTS)
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS)

# --- Data Generation and Plotting ---

# Target to run the C program (generates CSV, function data, function plot script)
run: $(EXECUTABLE) $(RESULTS_CSV) $(FUNCTION_PLOT_SCRIPT)

# Rule showing how the primary outputs are generated by the C code
$(RESULTS_CSV) $(FUNCTION_DATA) $(FUNCTION_PLOT_SCRIPT): $(EXECUTABLE)
	@echo "Running C program $(EXECUTABLE) to generate root finding results and plot script..."
	@./$(EXECUTABLE)


# Target to generate tables and heatmap plots using the Python script.
py_plots: $(PYTHON_PLOT_SCRIPT) $(RESULTS_CSV) $(PY_PLOTS)

# Rule to generate plots using Python. Lists main output files as targets.
$(PY_PLOTS): $(PYTHON_PLOT_SCRIPT) $(RESULTS_CSV)
	@echo "Generating root finding tables and heatmap plots using Python script..."
	$(PYTHON) $(PYTHON_PLOT_SCRIPT) # Runs the python script


# Target to generate the function plot using Gnuplot.
gnuplot_func_plot: $(FUNCTION_PLOT_SCRIPT) $(FUNCTION_DATA) $(GNUPLOT_FUNC_PLOT)

# Rule to generate the Gnuplot function plot
$(GNUPLOT_FUNC_PLOT): $(FUNCTION_PLOT_SCRIPT) $(FUNCTION_DATA)
	@echo "Generating function plot using Gnuplot..."
	@gnuplot $(FUNCTION_PLOT_SCRIPT)


# The main 'plots' target: runs C code, then Python script
plots: run py_plots
	@echo ""
	@echo "--- Plot Generation Summary (Root Finding) ---"
	@echo "Generated CSV data file:"
	@ls -l $(RESULTS_CSV) 2>/dev/null || echo "  $(RESULTS_CSV) not found."
	@echo "Generated Tables (Python, format: .txt):"
	@ls -l $(TABLE_DIR)/table_*.txt 2>/dev/null || echo "  No Python table files found in $(TABLE_DIR)."
	@echo "Generated Heatmap plots (Python, format: .$(OUTPUT_FORMAT)):"
	@ls -l $(PLOTS_DIR)/heatmap_*.$(OUTPUT_FORMAT) 2>/dev/null || echo "  No Python heatmap plots found in $(PLOTS_DIR) with format .$(OUTPUT_FORMAT)."
	@echo "------------------------------------------------"
	@echo "Plot generation finished. Check the '$(PLOTS_DIR)' and '$(TABLE_DIR)' directories."
	@echo "Optionally run 'make gnuplot_func_plot' for the function plot."


# --- Cleaning ---

clean:
	@echo "Cleaning temporary files and generated outputs..."
	rm -f $(OBJ_DIR)/*.o
	rm -f $(EXECUTABLE)
	rm -f $(DATA_DIR)/*.csv $(DATA_DIR)/*.dat
	# Remove all generated plots regardless of format
	rm -f $(PLOTS_DIR)/*.*
	rm -f $(SCRIPT_DIR)/*.gp # This will now typically only remove plot_function.gp
	# Remove only .txt files from the tables directory
	rm -f $(TABLE_DIR)/*.txt
	@echo "Cleaning finished."

distclean: clean
	@echo "Removing all generated directories..."
	# Use rm -rf to remove directories and their contents
	rm -rf $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(PLOTS_DIR) $(SCRIPT_DIR) $(TABLE_DIR)
	@echo "Deep cleaning finished."

# --- Help ---

help:
	@echo "Available commands for Root Finding Analysis:"
	@echo "  make all              - Compiles the C root finding program (default)"
	@echo "  make run              - Compiles and runs the C program to generate data (.csv, .dat) and function plot script (.gp)"
	@echo "  make py_plots         - Runs the Python script (src/plot_results.py) to generate tables (.txt) and heatmap plots (requires data from 'make run')"
	@echo "  make gnuplot_func_plot- Runs Gnuplot to generate the function plot (requires script/data from 'make run')"
	@echo "  make plots            - Runs 'make run', then generates all Python tables and heatmaps"
	@echo "  make clean            - Removes object files, executable, generated data, plots, scripts, and tables"
	@echo "  make distclean        - Performs 'clean' and removes generated directories"
	@echo "  make help             - Displays this help message"

# Declare phony targets
.PHONY: all directories run plots py_plots gnuplot_func_plot clean distclean help