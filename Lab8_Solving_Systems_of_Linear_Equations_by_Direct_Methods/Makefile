CC = gcc
# CFLAGS for general compilation
CFLAGS_BASE = -Wall -Wextra -Iinclude -g
CFLAGS_OPT = -O2 # Or -O3
CFLAGS = $(CFLAGS_BASE) $(CFLAGS_OPT) -std=c99 # Specify C standard
LDFLAGS = -lm # Link math library

# Directories
SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin
DATA_DIR = data
PLOTS_DIR = plots
SCRIPT_DIR = scripts
LATEX_DIR = latex_out
INCLUDE_DIR = include

# Source and object files (automatically find all .c and .h files)
SOURCES = $(wildcard $(SRC_DIR)/*.c)
OBJECTS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SOURCES))
HEADERS = $(wildcard $(INCLUDE_DIR)/*.h)
EXECUTABLE = $(BIN_DIR)/lab_gauss_solver

.PHONY: all directories run plots tables clean distclean help

# Default rule
all: directories $(EXECUTABLE)

directories:
	@echo "Creating directories..."
	@mkdir -p $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(PLOTS_DIR) $(SCRIPT_DIR) $(LATEX_DIR)

# Rule to compile object files
# $<: The first prerequisite (the .c file).
# $@: The target file (the .o file).
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(HEADERS)
	@echo "Compiling $< -> $@"
	$(CC) $(CFLAGS) -c $< -o $@

# Rule to link the executable
# $^: All prerequisites (all object files).
$(EXECUTABLE): $(OBJECTS)
	@echo "Linking $^ -> $@"
	$(CC) $(OBJECTS) -o $@ $(LDFLAGS)

run: all
	@echo "Running $(EXECUTABLE)..."
	./$(EXECUTABLE)
	@echo "Program finished."

plots: run
	@echo "Generating plots using Gnuplot..."
	@if [ -f "$(SCRIPT_DIR)/plot_A_I.gp" ]; then \
		gnuplot "$(SCRIPT_DIR)/plot_A_I.gp" && echo "  Generated plots for A_I." || echo "  Gnuplot failed for A_I plots."; \
	else \
		echo "  Skipping A_I plots: script not found."; \
	fi
	@if [ -f "$(SCRIPT_DIR)/plot_A_II.gp" ]; then \
		gnuplot "$(SCRIPT_DIR)/plot_A_II.gp" && echo "  Generated plots for A_II." || echo "  Gnuplot failed for A_II plots."; \
	else \
		echo "  Skipping A_II plots: script not found."; \
	fi
	@if [ -f "$(SCRIPT_DIR)/plot_cond_comparison.gp" ]; then \
		gnuplot "$(SCRIPT_DIR)/plot_cond_comparison.gp" && echo "  Generated condition number comparison plot." || echo "  Gnuplot failed for comparison plot."; \
	else \
		echo "  Skipping comparison plot: script not found."; \
	fi
	@echo "Plot generation finished. Check $(PLOTS_DIR)/ directory."

tables: run
	@echo "LaTeX tables generated in $(LATEX_DIR)/ directory by the C program."
	@echo "Please compile them with a LaTeX distribution (e.g., pdflatex)."
	@echo "Example: pdflatex your_main_report.tex (assuming you \\input the tables)"

clean:
	@echo "Cleaning temporary and generated files..."
	rm -f $(OBJ_DIR)/*.o
	rm -f $(EXECUTABLE)
	rm -f $(DATA_DIR)/*.csv
	rm -f $(PLOTS_DIR)/*.png
	rm -f $(SCRIPT_DIR)/*.gp
	rm -f $(LATEX_DIR)/*.tex
	@echo "Cleaning finished."

distclean: clean
	@echo "Removing all generated directories..."
	rm -rf $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(PLOTS_DIR) $(SCRIPT_DIR) $(LATEX_DIR)
	@echo "Distclean finished."

help:
	@echo "Available commands:"
	@echo "  make all        - Compiles the program (default)"
	@echo "  make run        - Compiles and runs the program (generates CSVs, Gnuplot scripts, LaTeX tables)"
	@echo "  make plots      - Compiles, runs, and then executes Gnuplot scripts"
	@echo "  make tables     - Compiles and runs (tables are generated by the C program)"
	@echo "  make clean      - Removes object files, executable, and all generated output files"
	@echo "  make distclean  - Performs 'clean' and removes generated directories"
	@echo "  make help       - Displays this help message"