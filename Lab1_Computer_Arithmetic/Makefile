# === Compiler and Flags ===
CC = gcc
# Używamy C11 standard, -O2 optimization, Wall/Wextra warnings, include path
CFLAGS = -Wall -Wextra -O2 -std=c11 -Iinclude
LDFLAGS = -lm

# === Directories ===
SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin
INC_DIR = include
DATA_DIR = data
# Katalog na generowane skrypty Gnuplot (.gp)
GP_SCRIPTS_DIR = scripts
# Katalog na generowane obrazy wykresów (.png)
PLOT_IMAGES_DIR = plots

# === Files ===
SOURCES = $(wildcard $(SRC_DIR)/*.c)
OBJECTS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SOURCES))
EXECUTABLE = $(BIN_DIR)/computer_arithmetic

# === Targets ===

.PHONY: all directories run plots clean distclean help

# Default target: Build everything
all: directories $(EXECUTABLE)

# Target to create necessary directories
directories:
	@mkdir -p $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(GP_SCRIPTS_DIR) $(PLOT_IMAGES_DIR)

# Rule to link the final executable
$(EXECUTABLE): $(OBJECTS)
	@echo "Linking $(EXECUTABLE)..."
	$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS)

# Rule to compile a .c file into a .o file
# Zależność od nagłówków i Makefile dla pewniejszej rekompilacji
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(wildcard $(INC_DIR)/*.h) Makefile
	@echo "Compiling $< -> $@..."
	$(CC) $(CFLAGS) -c $< -o $@

# Target to run the C program
# Przekazuje TRZY ścieżki. Wymaga dostosowanego kodu C!
run: all
	@echo "Running $(EXECUTABLE) -> Data:'$(DATA_DIR)' Scripts:'$(GP_SCRIPTS_DIR)' Images:'$(PLOT_IMAGES_DIR)'"
	@$(EXECUTABLE) $(DATA_DIR) $(GP_SCRIPTS_DIR) $(PLOT_IMAGES_DIR)
	@echo "Program C finished generating files."

# Target to execute gnuplot scripts (z GP_SCRIPTS_DIR) after they are generated by 'run'
plots: run
	@echo "Executing Gnuplot scripts from $(GP_SCRIPTS_DIR)..."
	@find $(GP_SCRIPTS_DIR) -maxdepth 1 -name '*.gp' -print -exec gnuplot {} \;
	@echo "--- Gnuplot execution finished (check for errors above if any). ---"
    # Reszta komunikatów ls bez zmian
	@echo "--- Data Files ($(DATA_DIR)):"
	@ls -l $(DATA_DIR)/*.csv 2>/dev/null || echo "  No .csv files found."
	@echo "--- Plot Scripts ($(GP_SCRIPTS_DIR)): ---"
	@ls -l $(GP_SCRIPTS_DIR)/*.gp 2>/dev/null || echo "  No .gp scripts found."
	@echo "--- Plot Images ($(PLOT_IMAGES_DIR)): ---"
	@ls -l $(PLOT_IMAGES_DIR)/*.png 2>/dev/null || echo "  No .png files found."


# Target to clean generated files using wildcards
clean:
	@echo "Cleaning generated files..."
	# Usuń pliki obiektowe, wykonywalny, dane, skrypty i wykresy
	rm -f $(OBJ_DIR)/*.o \
	      $(EXECUTABLE) \
	      $(DATA_DIR)/*.csv \
	      $(GP_SCRIPTS_DIR)/*.gp \
	      $(PLOT_IMAGES_DIR)/*.png
	# Usuń potencjalne śmieci z głównego katalogu
	rm -f *.csv *.gp *.png
	@echo "Clean finished."

# Target to clean everything 'clean' does PLUS the created directories
distclean: clean
	@echo "Cleaning directories..."
	# Usuwamy wszystkie katalogi tworzone przez 'directories'
	rm -rf $(OBJ_DIR) $(BIN_DIR) $(DATA_DIR) $(GP_SCRIPTS_DIR) $(PLOT_IMAGES_DIR)
	@echo "Distclean finished."

# Target to display help - zaktualizowano opisy
help:
	@echo "Makefile for $(EXECUTABLE)"
	@echo ""
	@echo "Usage:"
	@echo "  make all       - Compile the project (default)."
	@echo "  make run       - Compile and run C program (generates data in '$(DATA_DIR)' and scripts in '$(GP_SCRIPTS_DIR)')."
	@echo "  make plots     - Compile, run C program, and execute Gnuplot scripts from '$(GP_SCRIPTS_DIR)' to generate images in '$(PLOT_IMAGES_DIR)'."
	@echo "  make clean     - Remove generated files (.o, exe, .csv, .gp, .png)."
	@echo "  make distclean - Remove generated files and directories (obj, bin, data, $(GP_SCRIPTS_DIR), $(PLOT_IMAGES_DIR))."
	@echo "  make help      - Show this help message."